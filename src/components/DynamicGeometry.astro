<canvas id="visualization" class="fixed top-0 left-0 w-full h-full z-10 pointer-events-none"></canvas>

<script>
    document.addEventListener("DOMContentLoaded", () => {
      const canvas = document.getElementById("visualization");
      const ctx = canvas.getContext("2d");
      const buttonTogglePhysics = document.getElementById("togglePhysicsBtn")
  
      let centerX = canvas.width / 2;
      let centerY = canvas.height / 2;
      
      // Adjust canvas size
      const resizeCanvas = () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        // Update center of the canvas (and star position)
        centerX = canvas.width / 2;
        centerY = canvas.height / 2;

        // Update particles' center-of-orbit dynamically
        particles.forEach((particle) => {
          if (particle.isOrbiting) {
            particle.orbitCenter = { x: centerX, y: centerY };
          }
        });
      };
  
      const particles = [];
      const particleCount = (1 + (Math.random() / 2)) * 100;
      const connectionDistance = 150;

      let isOrbiting = false; // Toggle state for particle behavior
      let orbitDirection = Math.random() < 0.5 ? 1 : -1;
      let starCurrentOpacity = 0; // Start fully transparent
      let starTargetOpacity = 0; // Desired opacity (0 or 1)
  
      // Cursor particle
      const cursor = { x: -100, y: -100 };
  
      // Particle class
      class Particle {
        constructor(x, y, vx, vy) {
          this.x = x;
          this.y = y;
          this.vx = vx;
          this.vy = vy;
          this.size = 0.35;
          this.sizeTarget = this.size; // Target size for smooth transitions
          this.tracerPath = []; // Store recent positions for circular tracers
          this.isOrbiting = false;
          this.orbitSpeed = 0.01 + Math.random() * 0.02; // Speed of orbiting
          this.orbitAngle = Math.random() * Math.PI * 2; // Current angle of orbiting
          this.orbitCenter = { x: centerX, y: centerY };
          this.orbitDirection = orbitDirection; // 1 for clockwise, -1 for counterclockwise
          // this.reverseTransition = 0; // Smooth reversal factor (0: current, 1: reversed)
        }
  
        update() {
          if (this.isOrbiting) {
            // Update orbiting position
            const currentRadius = Math.hypot(this.x - this.orbitCenter.x, this.y - this.orbitCenter.y);
            const targetRadius = currentRadius; // The particle's current orbital level

            // Introduce damping to stabilize orbital level changes
            const dampingFactor = 0.9; // Closer to 1 means more resistance to change
            const adjustedRadius = currentRadius + (targetRadius - currentRadius) * (1 - dampingFactor);

            // Update orbiting position and direction
            this.orbitAngle += this.orbitSpeed * this.orbitDirection;
            this.x = this.orbitCenter.x + adjustedRadius * Math.cos(this.orbitAngle);
            this.y = this.orbitCenter.y + adjustedRadius * Math.sin(this.orbitAngle);

            this.orbitCenter = { x: centerX, y: centerY }; // Sync orbit center to the star

            // // Calculate orbit velocity based on distance from center
            const dx = this.x - centerX;
            const dy = this.y - centerY;
            const distance = Math.sqrt(dx * dx + dy * dy);

            // Update tracer path
            this.tracerPath.push({ x: this.x, y: this.y });
            if (this.tracerPath.length > 5) this.tracerPath.shift(); // Limit tracer length

            // Grow particle size for orbiting mode
            this.sizeTarget = Math.min(7.5, distance / 75); // Larger "planet-like" size inversely proportional to proximity to centroid
          } else {
            // Random movement behavior
            this.x += this.vx;
            this.y += this.vy;
    
            // Screen wrapping logic
            if (this.x < 0) this.x = canvas.width;
            if (this.x > canvas.width) this.x = 0;
            if (this.y < 0) this.y = canvas.height;
            if (this.y > canvas.height) this.y = 0;

            // Shrink particle size for random mode
            this.sizeTarget = 0.35;
          }
          // Smoothly transition size
          this.size += (this.sizeTarget - this.size) * 0.1;

          // Update position
          this.x += this.vx;
          this.y += this.vy;
        }
  
        draw() {
          if (isOrbiting) {
            // Draw circular tracers
            for (let i = 0; i < this.tracerPath.length - 1; i++) {
              const opacity = (i + 1) / this.tracerPath.length;
              ctx.beginPath();
              ctx.moveTo(this.tracerPath[i].x, this.tracerPath[i].y);
              ctx.lineTo(this.tracerPath[i + 1].x, this.tracerPath[i + 1].y);
              ctx.strokeStyle = `rgba(255, 255, 255, ${opacity})`;
              ctx.lineWidth = 1;
              ctx.stroke();
              ctx.closePath();
            }
          }

          // Draw particle
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.fillStyle = "white";
          ctx.fill();
          ctx.closePath();
        }
      }
  
      // Initialize particles
      for (let i = 0; i < particleCount; i++) {
        const x = Math.random() * canvas.width ** 2;
        const y = Math.random() * canvas.height ** 2;
        const vx = (Math.random() - 0.5) * 2;
        const vy = (Math.random() - 0.5) * 2;

        const particle = new Particle(x, y, vx, vy);

        // Assign initial orbit speed and angle
        const dx = particle.x - centerX;
        const dy = particle.y - centerY;
        const distance = Math.sqrt(dx * dx + dy * dy);

        particle.orbitSpeed = Math.max(0.5, 150 / distance) * 0.01275; // Faster near center
        particle.orbitAngle = Math.atan2(dy, dx);
        particle.orbitCenter = { x: centerX, y: centerY };

        particles.push(particle);
      }
  
      // Mousemove: Update cursor position
      document.addEventListener("mousemove", (event) => {
        // Detect mouse movement only if inside the canvas
        const rect = canvas.getBoundingClientRect();
        cursor.x = event.clientX - rect.left;
        cursor.y = event.clientY - rect.top;
      });
  
      // Mousedown: Trigger particle propulsion
      document.addEventListener("mousedown", (event) => {
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
  
        particles.forEach((particle) => {
          const dx = particle.x - x;
          const dy = particle.y - y;
          const distance = Math.sqrt(dx * dx + dy * dy);
  
          if (distance < connectionDistance) {
            particle.orbitDirection = particle.orbitDirection === -1 ? 1 : -1;
            const angle = Math.atan2(dy, dx);
            particle.vx = Math.cos(angle) * 1.5;
            particle.vy = Math.sin(angle) * 1.5;
          }
        });
      });
  
      const animate = () => {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
  
        // Add the central gradient "star"
        if (isOrbiting || starCurrentOpacity > 0) {
          // Smooth transition of opacity
          starCurrentOpacity += (starTargetOpacity - starCurrentOpacity) * 0.1;

          const gradient = ctx.createRadialGradient(
            centerX, // Center X
            centerY, // Center Y
            0, // Inner radius
            centerX, // Center X
            centerY, // Center Y
            Math.min(canvas.width, canvas.height) / 24 // Outer radius
          );
          gradient.addColorStop(0, `rgba(255, 255, 255, ${starCurrentOpacity})`); // Bright center
          gradient.addColorStop(0.25, `rgba(211, 211, 211, ${0.75 * starCurrentOpacity})`); // Soft gray
          gradient.addColorStop(0.55, `rgba(211, 211, 211, ${0.5 * starCurrentOpacity})`); // Softer gray
          gradient.addColorStop(1, `rgba(211, 211, 211, 0)`); // Fade to transparent

          ctx.fillStyle = gradient;
          ctx.fillRect(0, 0, canvas.width, canvas.height);
        }

        if (!isOrbiting) {
          for (let i = 0; i < particles.length; i++) {
            for (let j = i + 1; j < particles.length; j++) {
              const dx = particles[i].x - particles[j].x;
              const dy = particles[i].y - particles[j].y;
              const distance = Math.sqrt(dx * dx + dy * dy);
    
              if (distance < connectionDistance) {
                ctx.beginPath();
                ctx.moveTo(particles[i].x, particles[i].y);
                ctx.lineTo(particles[j].x, particles[j].y);
                ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / connectionDistance})`;
                ctx.lineWidth = 0.5;
                ctx.stroke();
                ctx.closePath();
              }
            }
          }
        }
  
        // Draw connections to the cursor
        particles.forEach((particle) => {
          const dx = particle.x - cursor.x;
          const dy = particle.y - cursor.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
  
          if (distance < connectionDistance) {
            ctx.beginPath();
            ctx.moveTo(particle.x, particle.y);
            ctx.lineTo(cursor.x, cursor.y);
            ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / connectionDistance})`;
            ctx.lineWidth = 0.5;
            ctx.stroke();
            ctx.closePath();
          }

          particle.update();
          particle.draw(ctx);
        });
  
        requestAnimationFrame(animate);
      };

      // Toggle orbiting behavior
      buttonTogglePhysics.addEventListener("click", () => {
        isOrbiting = !isOrbiting;
        orbitDirection = Math.random() < 0.5 ? 1 : -1;
        starTargetOpacity = isOrbiting ? 1 : 0; // Set target opacity based on orbit mode

        particles.forEach((particle) => {
          if (isOrbiting) {
            // Recalculate velocity based on current position
            const dx = particle.x - centerX;
            const dy = particle.y - centerY;
            const distance = Math.sqrt(dx * dx + dy * dy);
            // Recalculate orbit properties
            particle.orbitSpeed = Math.max(0.5, 200 / distance) * 0.015;
            particle.orbitAngle = Math.atan2(dy, dx);
            particle.orbitDirection = orbitDirection; // Re-randomize direction
            particle.orbitCenter = { x: centerX, y: centerY };
            particle.isOrbiting = true;
          } else {
            // Stop orbiting
            particle.isOrbiting = false;
          }
        })
      });
  
      animate();
      resizeCanvas();
      window.addEventListener("resize", resizeCanvas);
    });
  </script>
