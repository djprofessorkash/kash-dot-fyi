---
import BaseLayout from "../layouts/BaseLayout.astro";
import DynamicGeometry from "../components/DynamicGeometry.astro";
---

<BaseLayout>
	<div id="home" class="w-full md:-mb-10" >
		<section id="home-page" class="bg-pearl dark:bg-silver text-silver dark:text-pearl m-5 flex flex-col items-center justify-center space-y-6">
			<DynamicGeometry />

			<div class="h-screen text-white flex flex-col items-center justify-center space-y-6">
				<!-- Title -->
				<h1 id="glitch-title" class="text-5xl font-bold text-center md:text-7xl lg:text-8xl relative z-20 max-w-2xl">
					<span id="outerKashText" class="text-pearl">
						<span id="prefixGlitchedText" class="glitch-char white-char" data-type="static">AA</span>
						<span id="innerKashText" class="text-gold glitch-char" data-type="gold">KASH</span>
						<br />
						<span id="suffixGlitchedText" class="glitch-char white-char" data-type="static">SUDHAKAR</span>
					</span>
				</h1>

				<!-- Buttons -->
				<div class="flex space-x-4 relative z-20">
					<a id="directLinkToProjects" href="/projects/">
						<button id="allProjects" class="px-3 py-2 text-lg font-semibold bg-pearl text-silver rounded-lg hover:bg-gold hover:text-pearl transition">
							Projects
						</button>
					</a>
					<a id="directLinkToCourses" href="/teaching/">
						<button id="allCourses" class="px-3 py-2 text-lg font-semibold bg-pearl text-silver rounded-lg hover:bg-gold hover:text-pearl transition">
							Courses
						</button>
					</a>
				</div>
			</div>
		</section>
	</div>
</BaseLayout>

<script>
	const title = document.getElementById("glitch-title");
	const whiteChars = document.querySelectorAll(".white-char");
	const prefixGlitchedText = document.getElementById("prefixGlitchedText");
	const suffixGlitchedText = document.getElementById("suffixGlitchedText");
	const innerKashText = document.getElementById("innerKashText");

	// Helper function to generate random characters for the glitch effect
	const __getRandomCharacter = () => {
		const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%&_";
		return characters[Math.floor(Math.random() * characters.length)];
	};

	const triggerGlitchEffect = () => {
		// Step 1: Apply glitch to both white and gold characters
		const allTextSpans = [...whiteChars, innerKashText]; // Combine white and gold text spans
		allTextSpans.forEach((charSpan) => {
			const originalText = charSpan.textContent; // Store the full original string (e.g., "AA" or "SUDHAKAR")
			const characters = originalText.split(""); // Split string into individual letters
			charSpan.innerHTML = ""; // Clear the span to insert individual letters

			// Create a <span> for each letter to manipulate individually
			characters.forEach((letter) => {
				const letterSpan = document.createElement("span");
				letterSpan.textContent = letter;
				letterSpan.classList.add("letter");
				charSpan.appendChild(letterSpan);
			});

			// Start the glitch effect for each letter
			const letterSpans = charSpan.querySelectorAll(".letter");
			letterSpans.forEach((letterSpan, letterIndex) => {
				let glitchInterval;

				setTimeout(() => {
					glitchInterval = setInterval(() => {
						// Replace the letter with a random character
						letterSpan.textContent = __getRandomCharacter();
					}, 100 + (Math.random() * 300));

					// Stop the glitch effect after 300ms and restore the original letter
					setTimeout(() => {
						clearInterval(glitchInterval);
						letterSpan.textContent = characters[letterIndex]; // Restore the original letter
					}, 1500);
				}, Math.random() * 50); // Stagger glitching for each letter
			});
		});

		// Step 2: Fade out white text – surname first, then prefix of first name
		setTimeout(() => {
			// suffixGlitchedText.classList.remove("glitch");
			suffixGlitchedText.classList.add("fade-out");
		}, 800);
		setTimeout(() => {
			// prefixGlitchedText.classList.remove("glitch");
			prefixGlitchedText.classList.add("fade-out");
		}, 1200);

		// Step 3: Center "KASH" on X-axis
		setTimeout(() => {
			const containerWidth = title.offsetWidth; // Full width of the title container
			const kashWidth = innerKashText.offsetWidth; // Width of "KASH"
			const offsetX = (containerWidth - kashWidth) / 4; // Calculate horizontal offset to center
			// Apply X-transform to center "KASH"
			title.style.transform = `translateX(-${offsetX}px)`;
		}, 1500);
		
		// Step 4: Restore positions
		setTimeout(() => {
			// Reset transform to original position
			title.style.transform = "translateX(0)";
		}, 3200);
		// Step 5: Fade in white text – first prefix of first name
		setTimeout(() => {
			prefixGlitchedText.classList.remove("fade-out");
			prefixGlitchedText.classList.add("fade-in");
		}, 3200);
		setTimeout(() => {
			suffixGlitchedText.classList.remove("fade-out");
			suffixGlitchedText.classList.add("fade-in");
		}, 3600);

		// Step 6: Remove fade-in class after animation
		setTimeout(() => { whiteChars.forEach((char) => char.classList.remove("fade-in")); }, 3850);
	}

	// Add hover listener
	title.addEventListener("click", triggerGlitchEffect);
	// }
</script>
